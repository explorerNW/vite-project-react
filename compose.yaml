# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  react:
    build:
      context: .
    container_name: vite-project-react
    environment:
      NODE_ENV: production
    ports:
      - 3000:80
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - nginx

  nginx:
    image: nginx:alpine
    ports:
      - 80
    volumes:
      - ./app/dist:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
  # caddy:
  #   image: caddy:latest
  #   restart: unless-stopped
  #   ports:
  #     - 8082:81
  #     - 443:443
  #     - 443:443/udp
  #   volumes:
  #     - ./Caddyfile:/etc/caddy/Caddyfile
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

#!/bin/bash

# DOCKER_IMAGE=vite-project-react
# DOCKERFILE_PATH=/Users/mac/code-repo/react-repo/vite-project-react/Dockerfile
# PROJECT_PATH=/Users/mac/code-repo/react-repo/vite-project-react

# docker ps -a | grep $DOCKER_IMAGE && docker stop $DOCKER_IMAGE
# docker rm $DOCKER_IMAGE
# docker images -q $DOCKER_IMAGE && docker rmi $DOCKER_IMAGE

# cd $PROJECT_PATH
# docker build -t $DOCKER_IMAGE .

# docker run -it -d -p 3000:80 --name vite-project-react $DOCKER_IMAGE
